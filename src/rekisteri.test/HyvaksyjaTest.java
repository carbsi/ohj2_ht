package rekisteri.test;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

// Generated by ComTest BEGIN
import rekisteri.Hyvaksyjat;
import rekisteri.Hyvaksyja;
import rekisteri.SailoException;
import rekisteri.*;

/**
 * Test class made by ComTest
 * @version 19 Feb 2023 15:28:22 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class HyvaksyjaTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa60 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa60() throws SailoException {    // Hyvaksyjat: 60
    Hyvaksyjat hyvaksyjat = new Hyvaksyjat(); 
    Hyvaksyja op1 = new Hyvaksyja(), op2 = new Hyvaksyja(); 
    assertEquals("From: Hyvaksyjat line: 64", 0, hyvaksyjat.getLkm()); 
    hyvaksyjat.lisaa(op1); assertEquals("From: Hyvaksyjat line: 65", 1, hyvaksyjat.getLkm()); 
    hyvaksyjat.lisaa(op2); assertEquals("From: Hyvaksyjat line: 66", 2, hyvaksyjat.getLkm()); 
    hyvaksyjat.lisaa(op1); assertEquals("From: Hyvaksyjat line: 67", 3, hyvaksyjat.getLkm()); 
    assertEquals("From: Hyvaksyjat line: 68", op1, hyvaksyjat.anna(0)); 
    assertEquals("From: Hyvaksyjat line: 69", op2, hyvaksyjat.anna(1)); 
    assertEquals("From: Hyvaksyjat line: 70", op1, hyvaksyjat.anna(2)); 
    try {
    assertEquals("From: Hyvaksyjat line: 71", op1, hyvaksyjat.anna(3)); 
    fail("Hyvaksyjat: 71 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    hyvaksyjat.lisaa(op1); assertEquals("From: Hyvaksyjat line: 72", 4, hyvaksyjat.getLkm()); 
    hyvaksyjat.lisaa(op1); assertEquals("From: Hyvaksyjat line: 73", 5, hyvaksyjat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa95 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  /*@Test
  public void testKorvaaTaiLisaa95() throws SailoException,CloneNotSupportedException {    // Hyvaksyjat: 95
    Hyvaksyjat hyvaksyjat = new Hyvaksyjat(); 
    Hyvaksyja esi1 = new Hyvaksyja(), esi2 = new Hyvaksyja(); 
    esi1.rekisteroi(); esi2.rekisteroi(); 
    assertEquals("From: Hyvaksyjat line: 101", 0, hyvaksyjat.getLkm()); 
    hyvaksyjat.korvaaTaiLisaa(esi1); assertEquals("From: Hyvaksyjat line: 102", 1, hyvaksyjat.getLkm()); 
    hyvaksyjat.korvaaTaiLisaa(esi2); assertEquals("From: Hyvaksyjat line: 103", 2, hyvaksyjat.getLkm()); 
    Hyvaksyja esi3 = esi1.clone(); 
    Iterator<Hyvaksyja> it = hyvaksyjat.iterator(); 
    assertEquals("From: Hyvaksyjat line: 106", esi1, it.next()); 
    hyvaksyjat.korvaaTaiLisaa(esi3); assertEquals("From: Hyvaksyjat line: 107", 2, hyvaksyjat.getLkm()); 
    it = hyvaksyjat.iterator(); 
    Hyvaksyja j0 = it.next(); 
    assertEquals("From: Hyvaksyjat line: 110", esi3, j0); 
    j0 = it.next(); 
    assertEquals("From: Hyvaksyjat line: 112", esi2, j0); 
  } Generated by ComTest END
  */
 


  // Generated by ComTest BEGIN
  /** 
   * testPoista146 
   * @throws SailoException when error
   */
  @Test
  public void testPoista146() throws SailoException {    // Hyvaksyjat: 146
    Hyvaksyjat hyvaksyjat = new Hyvaksyjat(); 
    Hyvaksyja esi1 = new Hyvaksyja(), esi2 = new Hyvaksyja(), esi3 = new Hyvaksyja(); 
    esi1.rekisteroi(); esi2.rekisteroi(); esi3.rekisteroi(); 
//    int id1 = esi1.getHyvaksyjaId(); 
    hyvaksyjat.lisaa(esi1); hyvaksyjat.lisaa(esi2); hyvaksyjat.lisaa(esi3); 
//    assertEquals("From: Hyvaksyjat line: 153", 1, hyvaksyjat.poista(id1+1)); 
//    assertEquals("From: Hyvaksyjat line: 154", -1, hyvaksyjat.etsiId(id1+1)); assertEquals("From: Hyvaksyjat line: 154", 2, hyvaksyjat.getLkm()); 
//    assertEquals("From: Hyvaksyjat line: 155", 1, hyvaksyjat.poista(id1)); assertEquals("From: Hyvaksyjat line: 155", 1, hyvaksyjat.getLkm()); 
//    assertEquals("From: Hyvaksyjat line: 156", 0, hyvaksyjat.poista(id1+3)); assertEquals("From: Hyvaksyjat line: 156", 1, hyvaksyjat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId175 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId175() throws SailoException {    // Hyvaksyjat: 175
//    Hyvaksyjat hyvaksyjat = new Hyvaksyjat(); 
//    Hyvaksyja esi1 = new Hyvaksyja(), esi2 = new Hyvaksyja(), esi3 = new Hyvaksyja(); 
//    esi1.rekisteroi(); esi2.rekisteroi(); esi3.rekisteroi(); 
//    int id1 = esi1.getHyvaksyjatId(); 
//    hyvaksyjat.lisaa(esi1); hyvaksyjat.lisaa(esi2); hyvaksyjat.lisaa(esi3); 
//    assertEquals("From: Hyvaksyjat line: 182", 1, hyvaksyjat.etsiId(id1+1)); 
//    assertEquals("From: Hyvaksyjat line: 183", 2, hyvaksyjat.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testHyvaksyjatIterator344 
   * @throws SailoException when error
   */
  @Test
  public void testHyvaksyjatIterator344() throws SailoException {    // Hyvaksyjat: 344
    Hyvaksyjat hyvaksyjat = new Hyvaksyjat(); 
    Hyvaksyja esi1 = new Hyvaksyja(), esi2 = new Hyvaksyja(); 
    esi1.rekisteroi(); esi2.rekisteroi(); 
    hyvaksyjat.lisaa(esi1); 
    hyvaksyjat.lisaa(esi2); 
    hyvaksyjat.lisaa(esi1); 
//    StringBuffer ids = new StringBuffer(30); 
//    for (Hyvaksyja hyvaksyja:hyvaksyjat) // Kokeillaan for-silmukan toimintaa
//    ids.append(" "+hyvaksyja.getHyvaksyjaId()); 
//    String tulos = " " + esi1.getHyvaksyjaId() + " " + esi2.getHyvaksyjaId() + " " + esi1.getHyvaksyjaId(); 
//    assertEquals("From: Hyvaksyjat line: 363", tulos, ids.toString()); 
//    ids = new StringBuffer(30); 
//    for (Iterator<Hyvaksyja>  i=hyvaksyjat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
//    Hyvaksyja hyvaksyja = i.next(); 
//    ids.append(" "+hyvaksyja.getHyvaksyjaId()); 
    }
//    assertEquals("From: Hyvaksyjat line: 371", tulos, ids.toString()); 
//    Iterator<Hyvaksyja>   i=hyvaksyjat.iterator(); 
//    assertEquals("From: Hyvaksyjat line: 374", true, i.next() == esi1); 
/*    assertEquals("From: Hyvaksyjat line: 375", true, i.next() == esi2); 
    assertEquals("From: Hyvaksyjat line: 376", true, i.next() == esi1); 
    try {
    i.next(); 
    fail("Hyvaksyjat: 378 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi450 
   * @throws SailoException when error
   */
  /*@Test
  public void testEtsi450() throws SailoException {    // Hyvaksyjat: 450
    Hyvaksyjat hyvaksyjat = new Hyvaksyjat(); 
    Hyvaksyja hyvaksyja1 = new Hyvaksyja(); hyvaksyja1.parse("1|0|Iines|Ankka|030201-111C|tytt√∂|Paratiisi|51900|02020202|kissa|ateisti|Uuno Ankka|356456678|uunoa@email.fi|Irmeli Ankka|123123456|irmeli@email.com"); 
    Hyvaksyja hyvaksyja2 = new Hyvaksyja(); hyvaksyja2.parse("2|1|Ipa|Karhu|140205-123A|poika|Metsatie|51900|010101011|kissa|ateisti|Otto Karhu|352256678|okarhu@email.fi|Anna Karhu|12398765|annakarhu@email.com"); 
    Hyvaksyja hyvaksyja3 = new Hyvaksyja(); hyvaksyja3.parse("3|1|Susi|Sepe|121237-121V|poika|Perametsa|40100|020034534|omena|evlut|Ressu Repe|02200567|repe@email.com|Riina Repe| 020345123|riina@email.com"); 
    Hyvaksyja hyvaksyja4 = new Hyvaksyja(); hyvaksyja4.parse("4|0|Aku|Ankka|030201-115V|poika|Paratiisi|51900|020134502|kissa|ateisti|Uuno Ankka|356456678|uunoa@email.fi|Irmeli Ankka|123123456|irmeli@email.com"); 
    Hyvaksyja hyvaksyja5 = new Hyvaksyja(); hyvaksyja5.parse("5|1|Anna|Perala|091007-408U|tytto|Ankkakuja 12|40100|040023489|pahkina|islam|Aatu Perala|09003232|aaperala@email.com|Alma Perala|055009067|almaperala@email.com"); 
    hyvaksyjat.lisaa(hyvaksyja1); hyvaksyjat.lisaa(hyvaksyja2); hyvaksyjat.lisaa(hyvaksyja3); hyvaksyjat.lisaa(hyvaksyja4); hyvaksyjat.lisaa(hyvaksyja5); 
    List<Hyvaksyja> loytyneet; 
    loytyneet = (List<Hyvaksyja>)hyvaksyjat.etsi("*s*",2); 
    assertEquals("From: Hyvaksyjat line: 462", false, loytyneet.get(0) == hyvaksyja4); 
    assertEquals("From: Hyvaksyjat line: 463", true, loytyneet.get(1) == hyvaksyja3); 
    loytyneet = (List<Hyvaksyja>)hyvaksyjat.etsi("*a",2); 
    assertEquals("From: Hyvaksyjat line: 466", 2, loytyneet.size()); 
    assertEquals("From: Hyvaksyjat line: 467", true, loytyneet.get(0) == hyvaksyja5); 
    assertEquals("From: Hyvaksyjat line: 468", true, loytyneet.get(1) == hyvaksyja2); 
    loytyneet = (List<Hyvaksyja>)hyvaksyjat.etsi(null,-1); 
    assertEquals("From: Hyvaksyjat line: 471", 5, loytyneet.size()); 
  } // Generated by ComTest END
  */
}